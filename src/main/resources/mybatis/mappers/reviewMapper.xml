<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.saeromteo.review">
	<resultMap id="reviewResultMap" type="reviewresponsevo">
        <id property="reviewId" column="review_id" />
        <result property="writeDate" column="write_date" />
        <result property="reviewContent" column="review_content" />
        <result property="reviewScore" column="review_score" />
        <result property="reviewImage" column="review_image" />
        <result property="productCode" column="product_code" />
        <result property="userCode" column="user_code" />
    </resultMap>
    
	<resultMap id="reviewDetailResultMap" type="reviewdetailvo">
        <id property="reviewId" column="review_id" />
        <result property="writeDate" column="write_date" />
        <result property="reviewContent" column="review_content" />
        <result property="reviewScore" column="review_score" />
        <result property="reviewImage" column="review_image" />
        <result property="productCode" column="product_code" />
        <result property="userCode" column="user_code" />
        <result property="productName" column="product_name" />
        <result property="productImage" column="thumbnail" />
    </resultMap>
    
	<!-- <resultMap id="reviewRequestMap" type="reviewrequestvo">
        <id property="reviewId" column="review_id" />
        <result property="writeDate" column="write_date" />
        <result property="reviewContent" column="review_content" />
        <result property="reviewScore" column="review_score" />
        <result property="reviewImage" column="review_image" />
        <result property="productCode" column="product_code" />
        <result property="userCode" column="user_code" />
    </resultMap> -->
	<!-- Read -->
	<select id="readProductReview" parameterType="String" resultMap="reviewResultMap">
        SELECT * FROM REVIEW
        WHERE product_code = #{productCode} ORDER BY WRITE_DATE DESC
    </select>

    <select id="readDetail" parameterType="int" resultMap="reviewResultMap">
        SELECT * FROM REVIEW WHERE review_id = #{ReviewId}
    </select>

    <select id="readUserReview" parameterType="int" resultMap="reviewDetailResultMap">
        SELECT REVIEW.*,
        PRODUCT.PRODUCT_NAME,
        PRODUCT.THUMBNAIL
        FROM REVIEW JOIN PRODUCT USING(PRODUCT_CODE)
        WHERE user_id = #{userCode} 
        ORDER BY WRITE_DATE DESC
    </select>

    <select id="readScore" parameterType="int" resultMap="reviewResultMap">
        SELECT * FROM REVIEW WHERE review_score = #{reviewScore}
    </select>

    <select id="readCountScore" parameterType="String" resultType="int">
        SELECT COUNT(*) FROM REVIEW WHERE product_code = #{productCode}
    </select>

    <select id="readAvgScore" parameterType="String" resultType="double">
         SELECT IFNULL(ROUND(AVG(REVIEW_SCORE),2),0) FROM REVIEW WHERE product_code = #{productCode}
    </select>

    <select id="readByDate" parameterType="Integer" resultMap="reviewDetailResultMap">
         SELECT REVIEW.*,
        PRODUCT.PRODUCT_NAME,
        PRODUCT.THUMBNAIL
         FROM REVIEW JOIN PRODUCT USING(PRODUCT_CODE)
         WHERE (WRITE_DATE BETWEEN DATE_SUB(NOW(), INTERVAL #{standard} DAY) AND NOW()) AND USER_ID=#{userId}
         ORDER BY WRITE_DATE DESC
    </select>

    <select id="readByDateBetween" parameterType="reviewrequestdatevo" resultMap="reviewDetailResultMap">
         SELECT  REVIEW.*,
        PRODUCT.PRODUCT_NAME,
        PRODUCT.THUMBNAIL
         FROM REVIEW JOIN PRODUCT USING(PRODUCT_CODE)
         WHERE (WRITE_DATE BETWEEN #{startDate} AND #{endDate}) AND USER_ID=#{userId} 
         ORDER BY WRITE_DATE DESC
    </select>
	
	<!-- Create -->
	<insert id="insertReview" parameterType="reviewrequestvo">
		INSERT INTO REVIEW(REVIEW_CONTENT, REVIEW_SCORE, REVIEW_IMAGE, PRODUCT_CODE, USER_ID)
		VALUES (#{reviewContent}, #{reviewScore}, #{reviewImage}, #{productCode}, #{userCode})
	</insert>
	
	<!-- Update -->
	<update id="updateReview" parameterType="reviewrequestvo">
		UPDATE REVIEW
		SET
			WRITE_DATE = CURRENT_TIMESTAMP,
			REVIEW_CONTENT = #{reviewContent},
			REVIEW_SCORE = #{reviewScore},
			REVIEW_IMAGE = #{reviewImage}
		WHERE
			REVIEW_ID = #{reviewId}
	</update>
	
	<!-- Delete -->
	<delete id="deleteReview" parameterType="int">
		DELETE FROM REVIEW
		WHERE REVIEW_ID = #{reviewId}
	</delete>
	
	<!-- 페이징 처리 (특정 페이지에 해당하는 후기 목록 가져옴) -->
	<select id="readAllPaged" parameterType="map" resultType="reviewResultMap">
		SELECT * FROM REIVEW
		LIMIT #{offset}, #{size}
	</select>
	
</mapper>