<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.saeromteo.app.product">

    <!-- 모든 상품 정보 조회 -->
    <select id="readAll" resultType="productresponsevo">
		   SELECT 
            p.productCode, <!-- 수정된 부분 -->
            p.productName, <!-- 수정된 부분 -->
            p.productPrice, <!-- 수정된 부분 -->
            CASE
                WHEN d.discountRate IS NOT NULL THEN p.productPrice * (1 - d.discountRate) <!-- 수정된 부분 -->
                ELSE p.productPrice <!-- 수정된 부분 -->
            END AS discountedPrice, 
            p.stockQuantity, <!-- 수정된 부분 -->
            p.registrationDate, <!-- 수정된 부분 -->
            p.envMark, <!-- 수정된 부분 -->
            p.thumbnail, <!-- 수정된 부분 -->
            p.detailImage, <!-- 수정된 부분 -->
            p.categoryNumber, <!-- 수정된 부분 -->
            p.discountCode, <!-- 수정된 부분 -->
            d.discountRate <!-- 수정된 부분 -->
        FROM 
            PRODUCT p
        LEFT JOIN 
            DISCOUNT d ON p.discountCode = d.discountCode <!-- 수정된 부분 -->
    </select>

    <!-- 특정 productCode에 해당하는 상품 정보 조회 -->
    <select id="readByProductCode" parameterType="int" resultType="productresponsevo">
        SELECT 
            productCode,
            productName,
            productPrice,
            stockQuantity,
            registrationDate,
            envMark,
            thumbnail,
            detailImage,
            categoryNumber,
            discountCode,
            discountRate
        FROM 
            PRODUCT
        LEFT JOIN 
            DISCOUNT ON PRODUCT.discountCode = DISCOUNT.discountCode
        WHERE 
            productCode = #{productCode};
    </select>

    <!-- 특정 categoryNumber에 해당하는 상품 정보 조회 -->
    <select id="readByCategory" parameterType="int" resultType="productresponsevo">
        SELECT 
            productCode,
            productName,
            productPrice,
            stockQuantity,
            registrationDate,
            envMark,
            thumbnail,
            detailImage,
            categoryNumber,
            discountCode,
            discountRate
        FROM 
            PRODUCT
        LEFT JOIN 
            DISCOUNT ON PRODUCT.discountCode = DISCOUNT.discountCode
        WHERE 
            categoryNumber = #{categoryNumber};
    </select>
    
    <!-- 특정 parentCategoryNumber에 해당하는 상품 정보 조회 -->
    <select id="readByParentCategory" parameterType="int" resultType="productresponsevo">
        SELECT 
            productCode,
            productName,
            productPrice,
            stockQuantity,
            registrationDate,
            envMark,
            thumbnail,
            detailImage,
            categoryNumber,
            discountCode,
            discountRate
        FROM 
            PRODUCT
        LEFT JOIN 
            DISCOUNT ON PRODUCT.discountCode = DISCOUNT.discountCode
        INNER JOIN 
            PRODUCT_CATEGORY_PATH ON PRODUCT.categoryNumber = PRODUCT_CATEGORY_PATH.childCategoryId
        WHERE 
            PRODUCT_CATEGORY_PATH.parentCategoryId = #{parentCategoryNumber};
    </select>

    <!-- 새로운 상품 정보 삽입 -->
    <insert id="insertProduct" parameterType="productrequestvo">
        INSERT INTO PRODUCT (
            productCode,
            productName,
            productPrice,
            stockQuantity,
            registrationDate,
            envMark,
            thumbnail,
            detailImage,
            categoryNumber,
            discountCode
        )
        VALUES (
            #{productCode},
            #{productName},
            #{productPrice},
            #{stockQuantity},
            #{registrationDate},
            #{envMark},
            #{thumbnail},
            #{detailImage},
            #{categoryNumber},
            #{discountCode}
        );
    </insert>

    <!-- 기존 상품 정보 수정 -->
    <update id="updateProduct" parameterType="productrequestvo">
        UPDATE PRODUCT
        SET 
            productName = #{productName},
            productPrice = #{productPrice},
            stockQuantity = #{stockQuantity},
            registrationDate = #{registrationDate},
            envMark = #{envMark},
            thumbnail = #{thumbnail},
            detailImage = #{detailImage},
            categoryNumber = #{categoryNumber},
            discountCode = #{discountCode}
        WHERE 
            productCode = #{productCode};
    </update>

    <!-- 특정 productCode에 해당하는 상품 정보 삭제 -->
    <delete id="deleteProduct" parameterType="int">
        DELETE FROM PRODUCT WHERE productCode = #{productCode};
    </delete>
    
    <!-- 페이징 처리 (특정 페이지에 해당하는 상품 목록을 가져옴) -->
    <select id="readAllPaged" parameterType="map" resultType="productresponsevo">
        SELECT 
            productCode,
            productName,
            productPrice,
            CASE
                WHEN discountRate IS NOT NULL THEN productPrice * (1 - discountRate)
                ELSE productPrice
            END AS discountedPrice,
            stockQuantity,
            registrationDate,
            envMark,
            thumbnail,
            detailImage,
            categoryNumber,
            discountCode,
            discountRate
        FROM PRODUCT
        LIMIT #{offset}, #{size};
    </select>
    
    <!-- 정렬 기준에 따른 상품 정보 조회 -->
    <select id="readAllSorted" resultType="productresponsevo" parameterType="map">
        SELECT 
            p.productCode, <!-- 수정된 부분 -->
            p.productName, <!-- 수정된 부분 -->
            CASE
                WHEN d.discountRate IS NOT NULL THEN p.productPrice * (1 - d.discountRate) <!-- 수정된 부분 -->
                ELSE p.productPrice <!-- 수정된 부분 -->
            END AS discountedPrice,
            p.stockQuantity, <!-- 수정된 부분 -->
            p.registrationDate, <!-- 수정된 부분 -->
            p.envMark, <!-- 수정된 부분 -->
            p.thumbnail, <!-- 수정된 부분 -->
            p.detailImage, <!-- 수정된 부분 -->
            p.categoryNumber, <!-- 수정된 부분 -->
            p.discountCode, <!-- 수정된 부분 -->
            d.discountRate <!-- 수정된 부분 -->
        FROM 
            PRODUCT p
        LEFT JOIN 
            DISCOUNT d ON p.discountCode = d.discountCode <!-- 수정된 부분 -->
        ORDER BY 
            <choose>
                <when test="sortBy == 'new'">p.registrationDate DESC</when> <!-- 수정된 부분 -->
                <when test="sortBy == 'lowPrice'">p.productPrice ASC</when> <!-- 수정된 부분 -->
                <when test="sortBy == 'highPrice'">p.productPrice DESC</when> <!-- 수정된 부분 -->
                <when test="sortBy == 'discountRate'">d.discountRate DESC</when> <!-- 수정된 부분 -->
                <otherwise>p.productName ASC</otherwise> <!-- 수정된 부분 -->
            </choose>
    </select>

</mapper>
